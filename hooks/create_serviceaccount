#!/usr/bin/env bash

source /hooks/common/functions.sh

hook::config() {
  cat <<EOF
{
  "configVersion":"v1",
  "kubernetes": [
    {
      "apiVersion": "v1",
      "kind": "serviceaccount",
      "executeHookOnEvent": [
        "Modified"
      ]
    }
  ]
}
EOF
}

hook::trigger() {
  # ignore Synchronization for simplicity
  # TODO: check each namespace in .[0].objects
  type=$(jq -r '.[0].type' $BINDING_CONTEXT_PATH)
  if [[ $type == "Synchronization" ]] ; then
    echo Got Synchronization event
    exit 0
  fi

#  cat $BINDING_CONTEXT_PATH >> /tmp/exec.log
#  set -x

  serviceaccount=$(jq -r ".[] | .object.metadata | .name" $BINDING_CONTEXT_PATH);
  for namespace in $(jq -r ".[] | .object.metadata | select(.namespace == \"${MAIN_NAMESPACE}\" | not ) | .namespace" $BINDING_CONTEXT_PATH);
  do
    for secret in $(kubectl -n ${namespace} get secret -l pull-secret="yes" -o jsonpath="{.items[*].metadata.name}");
    do
      # Check if serviceaccount already has the secret
      has_secret=$(jq -r ".[] | .object.secrets[] | select(.name == \"${secret}\" ) | .name" $BINDING_CONTEXT_PATH);
      if [ "${has_secret}" == "" ];
      then
        # Update service account to add the secret name as regular secret and imagePullSecrets
        kubectl -n ${namespace} get serviceaccount ${serviceaccount} -o json \
          | jq -r ".imagePullSecrets |= (. + [{\"name\": \"${secret}\"}] | unique) | .secrets |= (. + [{\"name\": \"${secret}\"}] | unique)" \
          | kubectl::apply
      fi
    done
  done
}

common::run_hook "$@"
